bool compare(vector<int> a,vector<int> b){
    if(a[2]>b[2])return 1;
    return 0;
}

int Solution::solve(int A, vector<vector<int> > &B, int C) {
    int sum=0;
    
    sort(B.begin(),B.end(),compare);
    
    for(int i=0;i<B.size();i++){
        if(C>0){B[i][2]=0;C--;}
    }
    
    unordered_map <int ,vector<pair<int,int>>> l;
    
    l[1].push_back(make_pair(1,0);
    
    for(int i=0;i<B.size();i++){
        l[B[i][0]].push_back(make_pair(B[i][1],B[i][2]));
    }
    
    
    int visited[A+1]={0};
    queue<pair<int,int>> Q;
    visited[1]=1;
    Q.push(l[1]);
    
    while(!Q.empty()){
        pair<int,int> x;
        x=Q.front();
        sum+=x.second;
        Q.pop();
        
        for(auto i:l[x.first]){
            i.second +=x.second;
            Q.push(i);
        }
    }
    
    return sum;
}
